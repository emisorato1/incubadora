Proceso de incubación huevos en la cual se hace una carga de huevos de los tres tipos de huevos (ej: se 
hace una carga de 30 huevos de araucanas, 37 huevos de camperos y huevos de 40 belichas), estos pasan por 
dos procesos consecutivos en primera instancia de incubación y en segunda de nacimiento. 

En el primer proceso de incubación el usuario el cual sabemos su nombre, contraseña y rol a cumplir, hace 
una carga de huevos de los tres tipos araucanas, camperos y belichas, además de la fecha de inicio de la 
incubación, y la incubadora utilizada en el proceso (hay 6 incubadoras, donde hay 3 modernas y 3 antiguas). 
Mientras sucede el proceso de incubación el usuario registra la información de los sensores de la incubadora 
(hay un sensor de motor de volteado, tres sensores de ventilación, un sensor de temperatura, un sensor de 
humedad y un sensor de la resistencia de evaporación). Al final del proceso el usuario coloca la fecha en 
que termino la incubación y la cantidad especifica de cada tipo de huevos fértiles que salieron del proceso 
de incubación que van a pasar al proceso de nacimiento.

Después del proceso de incubación, los huevos fértiles de araucanas, camperos y belichas que salieron de la 
incubadora pasan al proceso de nacimiento, especificando la cantidad de cada tipo de huevo que salió fértil, 
además de la fecha de inicio de la nacedora. El usuario coloca la nacedora que uso para el proceso (hay 4 
nacedoras, donde hay 2 modernas y 2 antiguas). Mientras sucede el proceso de nacimiento el usuario registra 
la información de los sensores de la incubadora (hay tres sensores de ventilación, un sensor de temperatura, 
un sensor de humedad y un sensor de la resistencia de evaporación). Al final del proceso el usuario coloca la 
fecha final del proceso, la cantidad especifica de cada tipo de huevos que nacieron del proceso de nacimiento 
y de la cantidad huevos de belichas que nacieron machos y hembras para saber cuántos machos se descartaron.

---------------------------------------------------------------

Instalacion de postgres en docker por consola

1- Este comando crea la base de datos:
 docker run --name my_postgres -e POSTGRES_USER=cardozo -e POSTGRES_PASSWORD=12345 -e POSTGRES_DB=db_inta -p 5432:5432 -d postgres:15.6
 -d: sirve para que podamos cerrar la consola (ejecutar en segundo plano)
 -p 5432:5432: Mapea el puerto 5432 del contenedor al puerto 5432 del host (localhost). Esto permite que puedas 
                conectarte a PostgreSQL desde tu máquina local
 Comando para ver si esta en proceso la base de datos: docker ps -a
 Comando para parar la db: docker stop name(nombre que le asignamos como proceso "my_postgres")
 Comando para poder eliminar la db: docker rm name(nombre que le asignamos como proceso "my_postgres") 
 Comando para verifica los logs del contenedor: docker logs my_postgres
 Comando para habilitar la apertura de la base de datos en la consola: docker exec -it my_postgres bash
 Comando para abrir la base de datos en la consola: psql -U cardozo --db db_inta --password
 Comando para ver las tablas y relaciones que hay: \d



# Importamos las bibliotecas necesarias
import os
import unittest
from flask import current_app
from app import create_app, db
from app.models.user import User
#from app.services import UserService

#user_service = UserService()

# Definimos la clase de prueba para el modelo User utilizando unittest
class UserTestCase(unittest.TestCase):
    """
    Test User model
    Necesitamos aplicar principios como DRY (Don't Repeat Yourself) y KISS (Keep It Simple, Stupid).
    YAGNI (You Aren't Gonna Need It) y SOLID (Single Responsibility Principle).
    """

    # Configuramos el entorno de prueba
    def setUp(self):
        
        # Creamos la aplicación y el contexto de la aplicación para pruebas
        self.app = create_app()
        self.app_context = self.app.app_context()
        self.app_context.push()
        # Creación de todas las tablas en la base de datos
        db.create_all()
        
        self.user_name_prueba = 'nombre'
        self.password_prueba = '12345'
        self.role_prueba = 'tecnico'
        
    # Limpiamos el entorno de prueba
    def tearDown(self):
        # Eliminamos la sesión y todas las tablas de la base de datos
        db.session.remove()
        db.drop_all()
        # Sacamos el contexto de la aplicación
        self.app_context.pop()

    # Prueba para verificar que la aplicación se crea correctamente
    def test_app(self):
        self.assertIsNotNone(current_app)
    
    # Prueba para verificar que los atributos del usuario se establecen correctamente
    def test_user(self):
        user = self.__get_user()        
        self.assertEqual(user.user_name, self.user_name_prueba)
        self.assertEqual(user.password, self.password_prueba)   
        self.assertEqual(user.role, self.role_prueba)
    
    # Prueba para verificar que el usuario se guarda correctamente en la base de datos
    def test_user_save(self):
    
        user = self.__get_user()
        db.session.add(user)
        db.session.commit()

        self.assertEqual(user.user_name, self.user_name_prueba)
        self.assertEqual(user.password, self.password_prueba)   
        self.assertEqual(user.role, self.role_prueba)
        
    # Prueba para verificar que el usuario se elimina correctamente de la base de datos
    def test_user_delete(self):
        
        user = self.__get_user()
        db.session.add(user)
        db.session.commit()

        # Borrar el usuario
        db.session.delete(user)
        db.session.commit()
        
        self.assertIsNone(User.query.get(user.id))
    
    # Prueba para verificar que se pueden obtener todos los usuarios
    def test_user_all(self):
    
        user = self.__get_user()
        db.session.add(user)
        db.session.commit()

        users = User.query.all()
        self.assertGreaterEqual(len(users), 1)
    
    # Prueba para verificar que se puede encontrar un usuario por su ID
    def test_user_find(self):
    
        user = self.__get_user()
        db.session.add(user)
        db.session.commit()

        user_find = User.query.get(1)
        self.assertIsNotNone(user_find)
        self.assertEqual(user_find.id, user.id)
        self.assertEqual(user_find.role, user.role)
        
    def __get_user(self):
        user = User()
        user.user_name = self.user_name_prueba
        user.password = self.password_prueba
        user.role = self.role_prueba
        return user

# Ejecutamos las pruebas si este script se ejecuta directamente
if __name__ == '__main__':
    unittest.main()




